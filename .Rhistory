c4 = c4+1
df_xy21[c4,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] >= 0.333) && (data1$X[i] < 0.667) && (data1$Y[i] >= 0.333) && (data1$Y[i] < 0.667) ){
c5 = c5+1
df_xy22[c5,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] >= 0.333) && (data1$X[i] < 0.667) && (data1$Y[i] >= 0.667)){
c6 = c6+1
df_xy23[c6,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] > 0.667) && (data1$Y[i] < 0.333)){
c7 = c7+1
df_xy31[c7,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] > 0.667) && (data1$Y[i] >= 0.333) && (data1$Y[i] < 0.667) ){
c8 = c8+1
df_xy32[c8,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] > 0.667) && (data1$Y[i] >= 0.667)){
c9 = c9+1
df_xy33[c9,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
}
df_xy11
plot(df_xy11$x,df_xy11$y)
plot(df_xy22$x,df_xy22$y)
df_xy11[,4] = list(Z1 = rep(0,100))
df_xy11
df_xy11[,3] = df_xy11$z * rep(2,100)
df_xy11
df_xy11[,3] = df_xy11$z * rep(-1,100)
df_xy11
data = read.csv('simulated_data_sigma.csv')
data1 = data.frame(data)
data1 = data1[,2:4]
k = 400
df_xy11 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c1 = 0
df_xy12 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c2 = 0
df_xy13 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c3 = 0
df_xy21 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c4 = 0
df_xy22 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c5 = 0
df_xy23 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c6 = 0
df_xy31 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c7 = 0
df_xy32 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c8 = 0
df_xy33 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c9 = 0
for( i in 1:length(data1$X)){
if((data1$X[i] < 0.333) && (data1$Y[i] < 0.333)){
c1 = c1+1
df_xy11[c1,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] < 0.333) && (data1$Y[i] >= 0.333) && (data1$Y[i] < 0.667) ){
c2 = c2+1
df_xy12[c2,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] < 0.333) && (data1$Y[i] >= 0.667)){
c3 = c3+1
df_xy13[c3,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] >= 0.333) && (data1$X[i] < 0.667) && (data1$Y[i] < 0.333)){
c4 = c4+1
df_xy21[c4,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] >= 0.333) && (data1$X[i] < 0.667) && (data1$Y[i] >= 0.333) && (data1$Y[i] < 0.667) ){
c5 = c5+1
df_xy22[c5,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] >= 0.333) && (data1$X[i] < 0.667) && (data1$Y[i] >= 0.667)){
c6 = c6+1
df_xy23[c6,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] > 0.667) && (data1$Y[i] < 0.333)){
c7 = c7+1
df_xy31[c7,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] > 0.667) && (data1$Y[i] >= 0.333) && (data1$Y[i] < 0.667) ){
c8 = c8+1
df_xy32[c8,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
if((data1$X[i] > 0.667) && (data1$Y[i] >= 0.667)){
c9 = c9+1
df_xy33[c9,] = c(data1$X[i], data1$Y[i], data1$Z[i])
}
}
print("third split done")
data = read.csv('simulated_data_sigma.csv')
data1 = data.frame(data)
data1 = data1[,2:4]
k = 400
df_xy11 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c1 = 0
df_xy12 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c2 = 0
df_xy13 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c3 = 0
df_xy21 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c4 = 0
df_xy22 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c5 = 0
df_xy23 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c6 = 0
df_xy31 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c7 = 0
df_xy32 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c8 = 0
df_xy33 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c9 = 0
for( i in 1:length(data1$x)){
if((data1$x[i] < 0.333) && (data1$y[i] < 0.333)){
c1 = c1+1
df_xy11[c1,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] < 0.333) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c2 = c2+1
df_xy12[c2,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] < 0.333) && (data1$y[i] >= 0.667)){
c3 = c3+1
df_xy13[c3,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] < 0.333)){
c4 = c4+1
df_xy21[c4,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c5 = c5+1
df_xy22[c5,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] >= 0.667)){
c6 = c6+1
df_xy23[c6,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] < 0.333)){
c7 = c7+1
df_xy31[c7,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c8 = c8+1
df_xy32[c8,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] >= 0.667)){
c9 = c9+1
df_xy33[c9,] = c(data1$x[i], data1$y[i], data1$z[i])
}
}
print("third split done")
length(df_xy11$x)
df_xy11$x
df_xy21$x
length(df_xy21$x)
length(df_xy31$x)
plot(1:100, df_xy13$z)
length(df_xy13$z)
plot(1:400, df_xy13$z)
plot(1:400, df_xy23$z)
plot(1:400, df_xy33$z)
lambda = function(u){
return(0.04*exp(sin(0.5*pi*u[1])+sin(0.5*pi*u[2])))
}
# function for partial sill
sigma = function(u){
return((0.33 * exp(-(u[1]+u[2]))) + 0.8)
}
# Function for smoothness
neu = function(u){
return(0.1 * exp(-0.5*(u[1]+u[2])) + 0.3)
}
sigma(c(0.333,0.333))
sigma(c(0.667,0.333))
sigma(c(0.667,0.667))
sigma(c(0.667,0.55))
lambda(c(0.333,0.667))
lambda(c(0.333,0.333))
lambda(c(0.667,0.667))
library(fields)
N = 400
x <- seq(0.333, 0.667, length.out = 20)
y <- seq(0.333, 0.667, length.out = 20)
d1 <- expand.grid(x = x, y = y)
X = d1$x              # X, Y co-ordinates getting generated here
Y = d1$y
co_ords = data.frame(X = X, Y = Y)
sigma = function(u){
return((0.33 * exp(-(u[1]+u[2]))) + 0.8)
}
sigma_vec = rep(NA, n)
for(i in 1:n){
u = u1 <- unlist(co_ords[i,],use.names = FALSE)
sigma_vec[i] = sigma(u)
}
quilt.plot(d1$x,d1$y, sigma_vec)
sigma = function(u){
return((0.33 * exp(-(u[1]+u[2]))) + 0.8)
}
sigma_vec = rep(NA, N)
for(i in 1:n){
u = u1 <- unlist(co_ords[i,],use.names = FALSE)
sigma_vec[i] = sigma(u)
}
quilt.plot(d1$x,d1$y, sigma_vec)
plot(sigma_vec)
sigma_vec
for(i in 1:n){
u = u1 <- unlist(co_ords[i,],use.names = FALSE)
sigma_vec[i] = sigma(u)
}
for(i in 1:N){
u = u1 <- unlist(co_ords[i,],use.names = FALSE)
sigma_vec[i] = sigma(u)
}
quilt.plot(d1$x,d1$y, sigma_vec)
N = 10000
x <- seq(0,1, length.out = 100)
y <- seq(0,1, length.out = 100)
d1 <- expand.grid(x = x, y = y)
X = d1$x              # X, Y co-ordinates getting generated here
Y = d1$y
co_ords = data.frame(X = X, Y = Y)
sigma = function(u){
return((0.33 * exp(-(u[1]+u[2]))) + 0.8)
}
sigma_vec = rep(NA, N)
for(i in 1:N){
u = u1 <- unlist(co_ords[i,],use.names = FALSE)
sigma_vec[i] = sigma(u)
}
quilt.plot(d1$x,d1$y, sigma_vec)
lambda_vec = rep(NA, N)
lambda = function(u){
return(0.04*exp(sin(0.5*pi*u[1])+sin(0.5*pi*u[2])))
}
for(i in 1:N){
u = u1 <- unlist(co_ords[i,],use.names = FALSE)
lambda_vec[i] = lambda(u)
}
quilt.plot(d1$x,d1$y, lambda_vec)
data = read.csv('simulated_data.csv')
data1 = data.frame(data)
data1 = data1[,2:4]
k = 400
df_xy11 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c1 = 0
df_xy12 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c2 = 0
df_xy13 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c3 = 0
df_xy21 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c4 = 0
df_xy22 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c5 = 0
df_xy23 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c6 = 0
df_xy31 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c7 = 0
df_xy32 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c8 = 0
df_xy33 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c9 = 0
for( i in 1:length(data1$x)){
if((data1$x[i] < 0.333) && (data1$y[i] < 0.333)){
c1 = c1+1
df_xy11[c1,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] < 0.333) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c2 = c2+1
df_xy12[c2,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] < 0.333) && (data1$y[i] >= 0.667)){
c3 = c3+1
df_xy13[c3,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] < 0.333)){
c4 = c4+1
df_xy21[c4,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c5 = c5+1
df_xy22[c5,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] >= 0.667)){
c6 = c6+1
df_xy23[c6,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] < 0.333)){
c7 = c7+1
df_xy31[c7,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c8 = c8+1
df_xy32[c8,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] >= 0.667)){
c9 = c9+1
df_xy33[c9,] = c(data1$x[i], data1$y[i], data1$z[i])
}
}
print("third split done")
data1
data1$x = data1$X
data1
data = read.csv('simulated_data.csv')
data1 = data.frame(data)
colnames(data1) <- c("x","y","z")
data1
data = read.csv('simulated_data.csv')
data1 = data.frame(data)
data1 = data1[,2:4]
colnames(data1) <- c("x","y","z")
data1
0.33+0
0.33/2
0.667-0.333
0.334/2
0.33+0.165
0.495+0.165
nod_points = (n1 = c(0.165,0.165), n2 = c(0.165,0.495), n3 = c(0.165,0.66),
n4 = c(0.495,0.165), n5 = c(0.495,0.495), n6 = c(0.495,0.66),
n4 = c(0.66,0.165), n5 = c(0.66,0.495), n6 = c(0.66,0.66))
nod_points = (n1 = c(0.165,0.165), n2 = c(0.165,0.495), n3 = c(0.165,0.66),
n4 = c(0.495,0.165), n5 = c(0.495,0.495), n6 = c(0.495,0.66),
n7 = c(0.66,0.165), n8 = c(0.66,0.495), n9 = c(0.66,0.66))
nod_points = (n1 = c(0.165,0.165), n2 = c(0.165,0.495), n3 = c(0.165,0.66),n4 = c(0.495,0.165), n5 = c(0.495,0.495), n6 = c(0.495,0.66),n7 = c(0.66,0.165), n8 = c(0.66,0.495), n9 = c(0.66,0.66))
nod_points = list(n1 = c(0.165,0.165), n2 = c(0.165,0.495), n3 = c(0.165,0.66),
n4 = c(0.495,0.165), n5 = c(0.495,0.495), n6 = c(0.495,0.66),
n7 = c(0.66,0.165), n8 = c(0.66,0.495), n9 = c(0.66,0.66))
nod_points$n1
nod_points[,1]
nod_points[1]
list(nod_points[1])
c(nod_points[1])
unlist(nod_points[1],use.names = FALSE)
N = 10000
x <- seq(0,1, length.out = 100)
y <- seq(0,1, length.out = 100)
d1 <- expand.grid(x = x, y = y)
X = d1$x              # X, Y co-ordinates getting generated here
Y = d1$y
co_ords = data.frame(X = X, Y = Y)
u = u1 <- unlist(co_ords[1,],use.names = FALSE)
k = function(u1,u2,h){
distance = ((u1[1] - u2[1])^2) + ((u1[2] - u2[2])^2)
return(exp(-distance/(2*h)))
}
sigma = c(1.259038,0.2507628,0.584782,1.997883,0.264549,0.297679,
0.6002059,0.6220044,1.322986)
nod_points = list(n1 = c(0.165,0.165), n2 = c(0.165,0.495), n3 = c(0.165,0.66),
n4 = c(0.495,0.165), n5 = c(0.495,0.495), n6 = c(0.495,0.66),
n7 = c(0.66,0.165), n8 = c(0.66,0.495), n9 = c(0.66,0.66))
sigma_est = function(u,nod_points,sigma){
k_part = rep(NA,9)
for(i in 1:9){
k_part[i] = k(u,unlist(nod_points[i],use.names = FALSE),h = 1)
}
sum_k = sum(k_part)
sigma_est = 0
for(i in 1:9){
sigma_est = simga_est + (sigma[i]*(k_part[i]/sum_k))
}
return(sigma_est)
}
sigma_est(u1,nod_points,sigma)
sigma_est(u1,nod_points,sigma)
sigma_est = function(u,nod_points,sigma){
k_part = rep(NA,9)
for(i in 1:9){
k_part[i] = k(u,unlist(nod_points[i],use.names = FALSE),h = 1)
}
sum_k = sum(k_part)
sigma_est1 = 0
for(i in 1:9){
sigma_est1 = sigma_est1 + (sigma[i]*(k_part[i]/sum_k))
}
return(sigma_est1)
}
sigma_est(u1,nod_points,sigma)
sigma_est_vec = rep(NA,N)
count = 0
for(i in 1:N){
u1 <- unlist(co_ords[i,],use.names = FALSE)
ssigma_est_vec[i] = sigma_est(u1,nod_points,sigma)
count = count +1
if(count %% 50 == 0)print(count)
}
sigma_est_vec = rep(NA,N)
count = 0
for(i in 1:N){
u1 <- unlist(co_ords[i,],use.names = FALSE)
sigma_est_vec[i] = sigma_est(u1,nod_points,sigma)
count = count +1
if(count %% 50 == 0)print(count)
}
sigma_est_vec[3]
sigma_est_vec[1]
sigma_est_vec[500]
sigma_est_vec[1000]
sigma_est_vec[10000]
quilt.plot(X,Y,sigma_est_vec)
sigma = c(1.259038,0.2507628,0.584782,1.997883,0.264549,0.297679,
0.6002059,0.6220044,1.322986)
sigma_est_vec = rep(NA,N)
count = 0
for(i in 1:N){
u1 <- unlist(co_ords[i,],use.names = FALSE)
sigma_est_vec[i] = sigma_est(u1,nod_points,sigma)
count = count +1
if(count %% 50 == 0)print(count)
}
quilt.plot(X,Y,sigma_est_vec)
df_xy13
print("exageostatr loaded")
data = read.csv('simulated_data.csv')
data1 = data.frame(data)
data1 = data1[,2:4]
colnames(data1) <- c("x","y","z")
k = 400
df_xy11 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c1 = 0
df_xy12 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c2 = 0
df_xy13 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c3 = 0
df_xy21 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c4 = 0
df_xy22 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c5 = 0
df_xy23 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c6 = 0
df_xy31 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c7 = 0
df_xy32 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c8 = 0
df_xy33 <- data.frame(x= numeric(k), y= numeric(k), z = numeric(k))
c9 = 0
for( i in 1:length(data1$x)){
if((data1$x[i] < 0.333) && (data1$y[i] < 0.333)){
c1 = c1+1
df_xy11[c1,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] < 0.333) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c2 = c2+1
df_xy12[c2,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] < 0.333) && (data1$y[i] >= 0.667)){
c3 = c3+1
df_xy13[c3,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] < 0.333)){
c4 = c4+1
df_xy21[c4,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c5 = c5+1
df_xy22[c5,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] >= 0.333) && (data1$x[i] < 0.667) && (data1$y[i] >= 0.667)){
c6 = c6+1
df_xy23[c6,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] < 0.333)){
c7 = c7+1
df_xy31[c7,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] >= 0.333) && (data1$y[i] < 0.667) ){
c8 = c8+1
df_xy32[c8,] = c(data1$x[i], data1$y[i], data1$z[i])
}
if((data1$x[i] > 0.667) && (data1$y[i] >= 0.667)){
c9 = c9+1
df_xy33[c9,] = c(data1$x[i], data1$y[i], data1$z[i])
}
}
print("third split done")
df_xy11
ml.n <- likfit(the_data , ini = c(0.81,0.7), nugget = 0, fix.nugget = TRUE)
library(geoR)
the_data = as.geodata(df_xy11,coords.col = 1:2, data.col = 3)
ml.n <- likfit(the_data , ini = c(0.81,0.7), nugget = 0, fix.nugget = TRUE)
ml.n
data = read.csv('simulated_data_sigma.csv')
the_data = as.geodata(data,coords.col = 2:3, data.col = 4)
ml.n <- likfit(the_data , ini = c(0.81,0.7), nugget = 0, fix.nugget = TRUE)
ml.n
data = grf(900,cov.pars = c(1, .25), kappa = 0.8)
data = grf(100,cov.pars = c(1, .25), kappa = 0.8)
data
data = grf(500,cov.pars = c(1, .25), kappa = 0.8)
data = grf(900,cov.pars = c(1, .25), kappa = 0.8)
data = grf(800,cov.pars = c(1, .25), kappa = 0.8)
data = grf(700,cov.pars = c(1, .25), kappa = 0.8)
data
data$data
data$co
data
data$coords
data$coords[1]
data$coords[1,1]
data$coords[,1]
data$coords[,2]
data$data[1]
data1 = data.frame(data$coords)
data1
data1$z <- data$data
write.csv(data1, "stationary_GP.csv")
